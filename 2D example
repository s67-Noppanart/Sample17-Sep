int[][] grid = {{1, 4, 5, 2}, {3, 2, 6, 5}, {4, 1, 3, 6}};
int rows = grid.length;
int cols = grid[0].length;
int cellWidth, cellHeight;
int clickedCol = -1;
int clickedRow = -1;
int drawCount = 0;
int maxDraw = 2;
int firstDraw;
int secondDraw;
int MatchDelay = 0;
int DelayMax = 50;


void setup() {
  size(500, 500);
  strokeWeight(10);
  background(255);
  cellWidth = width / cols;
  cellHeight = height / rows;
  
}


void draw(){
  draw_grid();
  // 2D array of sample values
  if (clickedCol != -1 && clickedRow != -1){
    int w = cellWidth * clickedCol;
    int h = cellHeight * clickedRow;
    draw_lines(w + 10, h + 10, grid[clickedRow][clickedCol]);
  } 
  if (drawCount == maxDraw) {
    if(firstDraw == secondDraw){
      println("Matched");
  } else {
      if (MatchDelay < DelayMax){
      println("no matched");
      MatchDelay++;
      } else {
      background(255);
      MatchDelay = 0;
  }
  }
  if (MatchDelay == 0){
    drawCount = 0;
    secondDraw = 0;
    clickedCol = -1;
    clickedRow = -1;
  }
  }
}


void draw_grid() {
  int w = width / cols;
  int h = height / rows;
  int i = 0;
  int j = 0;
  while (i < cols) {
    line(i * w, 0, i * w, height);
    i++; 
  }
  while (j < rows) {
    line(0, j * h, width, j * h);
    j++;
  }
}


void draw_lines(int x, int y, int n){
    int i = 0;
    while (i < n) {     
        line(x + 10 + (i * 20) , y, x + 10 + (i * 20), y + 40);
        i++;
    }
}


void mouseClicked(){
  if (drawCount < maxDraw) {
    clickedCol = mouseX / cellWidth;
    clickedRow = mouseY / cellHeight;
    if (drawCount == 0){
      firstDraw = grid[clickedRow][clickedCol];
    } else if (drawCount == 1){
      secondDraw = grid[clickedRow][clickedCol]; 
    }
    drawCount++;
  println("Clicked on " + "(" + clickedRow + ",", clickedCol + ") " + "Draws :",drawCount, firstDraw, secondDraw);
  } 
}
