int[][] grid = {{1, 4, 5, 2}, {3, 2, 6, 5}, {4, 1, 3, 6}};
int rows = grid.length;
int cols = grid[0].length;
int cellWidth, cellHeight;
int clickedCol = -1;
int clickedRow = -1;
int firstRow = -1, firstCol = -1;
int secondRow = -1, secondCol = -1;
int drawCount = 0;
int maxDraw = 2;
int firstDraw;
int secondDraw;
int MatchDelay = 0;
int DelayMax = 50;
boolean isStarted = false;
boolean isMismatched = false;
int Match = 0;
int MaxMatch = (rows * cols) / 2;
boolean[][] matchedDraws = new boolean[rows][cols];

void setup() {
  size(500, 500);
  strokeWeight(10);
  background(210);
  cellWidth = width / cols;
  cellHeight = height / rows;
}

void draw() {
  if (!isStarted) {
    textSize(40);
    textAlign(CENTER, CENTER);
    text("Memory game", width / 2, height / 3);
    text("Press any key to start", width / 2, 2 * (height / 3));
  } else {
    draw_grid();
    int i = 0;
    while (i < rows) {
      int j = 0;
      while (j < cols) {
        if (matchedDraws[i][j]) {
            int w = cellWidth * j;
            int h = cellHeight * i;
            draw_lines(w + 10, h + 10, grid[i][j]);
        }
        j++;
      }  
    i++;
    }
    if (clickedCol != -1 && clickedRow != -1 && !matchedDraws[clickedRow][clickedCol]) {
      int w = cellWidth * clickedCol;
      int h = cellHeight * clickedRow;
      draw_lines(w + 10, h + 10, grid[clickedRow][clickedCol]);
    }
    if (drawCount == maxDraw) {
      if (firstDraw == secondDraw) {
        // Mark the two selected cells as matched
        matchedDraws[firstRow][firstCol] = true;
        matchedDraws[secondRow][secondCol] = true;
      } else {
        if (MatchDelay < DelayMax) {
          MatchDelay++;
        } else {
          isMismatched = true;
          background(210);
          MatchDelay = 0;
        }
      }
      if (MatchDelay == 0) {
        resetGame();
      }
    }
  }
  victory();
}



void draw_grid() {
  int w = width / cols;
  int h = height / rows;
  int i = 0;
  int j = 0;
  while (i < cols) {
    line(i * w, 0, i * w, height);
    i++; 
  }
  while (j < rows) {
    line(0, j * h, width, j * h);
    j++;
  }
}


void draw_lines(int x, int y, int n){
    int i = 0;
    while (i < n) {     
        line(x + 10 + (i * 20) , y, x + 10 + (i * 20), y + 40);
        i++;
    }
}


void mouseClicked() {
  if (drawCount < maxDraw && isStarted) {
    clickedCol = mouseX / cellWidth;
    clickedRow = mouseY / cellHeight;
    
    if (!matchedDraws[clickedRow][clickedCol]) {
      if (drawCount == 0) {
        firstDraw = grid[clickedRow][clickedCol];
        firstRow = clickedRow;
        firstCol = clickedCol;
      } else if (drawCount == 1) {
        secondDraw = grid[clickedRow][clickedCol];
        secondRow = clickedRow;
        secondCol = clickedCol;
      }
      drawCount++;
    }

    println("Clicked on (" + clickedRow + ", " + clickedCol + ") Draws: " + drawCount + " First: " + firstDraw + " Second: " + secondDraw + " Match: " + Match);
  }
}


void keyPressed() {
  if (!isStarted) {
    isStarted = true;
    background(210);
  }
}


void resetGame() {
  if (isMismatched) {
    println("No match");
  } else {
    println("Matched!");
    matchedDraws[firstRow][firstCol] = true;
    matchedDraws[secondRow][secondCol] = true;
    Match++;
  }
  drawCount = 0;
  clickedCol = -1;
  clickedRow = -1;
  firstRow = -1;
  firstCol = -1;
  secondRow = -1;
  secondCol = -1;
  isMismatched = false;
}


void victory() {
  if (Match == MaxMatch) {
    background(210);
    textSize(50);
    textAlign(CENTER, CENTER);
    text("You win!", width / 2, height / 2);
    isStarted = false;
  }
}
